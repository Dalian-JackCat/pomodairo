<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:views="com.views.*" 
	xmlns:ns1="com.pomodairo.components.*"

	height="165" width="320" minWidth="320"
	backgroundColor="#292929"

	initialize="beforeInit()"
	creationComplete="init()" 
	windowResize="{resizeHandler(event)}"
	closing="beforeClose()"
	close="shutdown()"

	title="{timerCanvas.appTitle}"
	showStatusBar="false"
	>
	
	<fx:Style source="style/styles.css"/>
	
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import com.pomodairo.Pomodoro;
			import com.pomodairo.PomodoroEventDispatcher;
			import com.pomodairo.TaskManager;
			import com.pomodairo.components.PomoItemInput;
			import com.pomodairo.components.StatisticsWindow;
			import com.pomodairo.components.config.AboutPanel;
			import com.pomodairo.components.config.AdvancedConfigPanel;
			import com.pomodairo.components.config.ConfigPanel;
			import com.pomodairo.components.config.SoundConfigPanel;
			import com.pomodairo.components.config.TimingConfigPanel;
			import com.pomodairo.components.config.TwitterConfigPanel;
			import com.pomodairo.db.Storage;
			import com.pomodairo.events.ConfigurationUpdatedEvent;
			import com.pomodairo.events.GuiChangeEvent;
			import com.pomodairo.events.PomodoroEvent;
			import com.pomodairo.twitter.TwitterManager;

			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;


            public static const MIN_WIDTH:Number = 320;

            public static const MINI_HEIGHT:Number = 52;
            public static const SHORT_HEIGHT:Number = 167;
            public static const FULL_HEIGHT:Number = 167 + 300;

			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			private var taskManager:TaskManager = TaskManager.instance;
			
			private var twitterManager:TwitterManager = new TwitterManager();

			private function beforeInit():void {
				PomodoroEventDispatcher.getInstance().addEventListener(ConfigurationUpdatedEvent.UPDATED, onConfigurationChange);
				
				var remember:Boolean = Storage.instance.config[ConfigPanel.REMEMBER_POSITION] == "true";
				if (remember)
				{
					var setX:Number = Storage.instance.config["window.x"];
					var setY:Number = Storage.instance.config["window.y"];
					if (setX >= 0 && setX < Capabilities.screenResolutionX) {
						this.nativeWindow.x = setX;
					}
					if (setY >= 0 && setY < Capabilities.screenResolutionY) {
						this.nativeWindow.y = setY;
					}
				}

				var setHeight:Number = Storage.instance.config["window.height"];
				if (setHeight >= MINI_HEIGHT && setHeight < Capabilities.screenResolutionY)
				{
					this.height = setHeight;
				}

				var setWidth:Number = Storage.instance.config["window.width"];
				if (setWidth >= MIN_WIDTH && setHeight < Capabilities.screenResolutionX)
				{
					this.width = setWidth;
				}
				
				// Fugly hack... loads and presets all configuration values
				var cfg:ConfigPanel = new ConfigPanel();
				cfg.populate();
				cfg.notifyConfiguration();
				
				var advancedConfig:AdvancedConfigPanel = new AdvancedConfigPanel();
				advancedConfig.populate();
				advancedConfig.notifyConfiguration();
				
				var soundConfig:SoundConfigPanel = new SoundConfigPanel();
				soundConfig.populate();
				soundConfig.notifyConfiguration();
				
				var timingConfig:TimingConfigPanel = new TimingConfigPanel();
				timingConfig.populate();
				timingConfig.notifyConfiguration();
			}
				
        	private function init():void {
        		checkForUpdates();
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.START_POMODORO, closeTaskList);
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.SELECTED, onPomodoroSelected);
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.TIME_OUT, onPomodoroTimeout);
				PomodoroEventDispatcher.getInstance().addEventListener(GuiChangeEvent.UPDATED, onGuiChange);
				
				// Dispatch Twitter config after initialization to avoid locking up in a fugly graphic mode
				var tcfg:TwitterConfigPanel = new TwitterConfigPanel();
				tcfg.populate();
				tcfg.notifyConfiguration();
				
				// Display task list on startup
				toggleTaskList();
        	}
        	
        	private function checkForUpdates():void {
				appUpdater.configurationFile = new File("app:/updateConfig.xml");
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED,
				updaterInitialised);
				appUpdater.initialize();
			}
				
			private function updaterInitialised(event:UpdateEvent):void {
				appUpdater.checkNow();
			}
			
			private function onConfigurationChange(e:ConfigurationUpdatedEvent):void {
        		trace("Configuration change: "+e.configElement.name +" -> "+e.configElement.value);
				if (e.configElement.name == ConfigPanel.ALWAYS_ON_TOP) 
				{
					this.alwaysInFront = e.configElement.value == "true";
				}
			}
			
			private function shutdown():void
			{
				twitterManager.stop();
			}
        	
        	private function onPomodoroTimeout(event:PomodoroEvent):void {
        		nativeWindow.notifyUser(NotificationType.CRITICAL);
        		nativeWindow.orderToFront();
        	}
        	
        	private function onPomodoroSelected(event:PomodoroEvent):void {
        		trace("Pomodoro selected: "+event.pomodoro.name);
        		unplannedButton.enabled = true;
        		interruptionButton.enabled = true;
        	}
        
            private function toggleTaskList():void {
            	if (!taskListPanel.visible) {
					taskListPanel.visible = true;
					var setHeight:Number = Storage.instance.config["window.height"];
					this.height = setHeight > Capabilities.screenResolutionY || setHeight < FULL_HEIGHT ? FULL_HEIGHT : setHeight;
            	} else {
            		closeTaskList();
            	}
            }
            
            private function closeTaskList(event:PomodoroEvent=null):void {
				this.height = SHORT_HEIGHT;
				taskListPanel.visible = false;
            }

            private function newInterruption():void {
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_INTERRUPTION;
            	input.reference = taskManager.activeTask;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }
            
             private function newUnplanned():void {
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_UNPLANNED;
            	input.reference = taskManager.activeTask;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }
            
            private function beforeClose():void {
            	Storage.instance.setConfigurationValue("window.x",""+this.nativeWindow.x);
            	Storage.instance.setConfigurationValue("window.y",""+this.nativeWindow.y);
				Storage.instance.setConfigurationValue("window.height", ""+this.height);
				Storage.instance.setConfigurationValue("window.width", ""+this.width);
            }
            
			private function onGuiChange(event:GuiChangeEvent):void {
				if (event.miniView) {
					trace("Switch application to mini view");
					myMenuBar.enabled = false;
					closeTaskList();
					this.height = MINI_HEIGHT;
				} else {
					trace("Switch application to regular view");
					myMenuBar.enabled = true;
					this.height = SHORT_HEIGHT;
				}			
			}
            
			private function toggleViewState():void {
				timerCanvas.toggleMiniView();
			}

			private function onAddPomodoroClicked(event:Event=null):void
			{
				var input:PomoItemInput = new PomoItemInput();
				input.type = Pomodoro.TYPE_POMODORO;
				input.selectAfterCreate = true;
				PopUpManager.addPopUp(input, this, true);
				PopUpManager.centerPopUp(input);
			}

			private function resizeHandler(event:Event):void
			{
				if (this.height == MINI_HEIGHT || this.height == SHORT_HEIGHT)
					return;

				var value:Number = Storage.instance.config['window.height'];
				if (this.height == value)
					return;

				Storage.instance.setConfigurationValue('window.height', ''+this.height);
			}

			
    		/* ----------------------------------------------------
        		MENU STUFF
	   	  	---------------------------------------------------- */
	   	  
            private function menuClick(event:MenuEvent):void {
                if (event.item.@action == 'config') {
                	showSettingsDialog();
                } else if (event.item.@action == 'statistics') {
                	showStatisticsPanel();
                } else if (event.item.@action == 'twitter') {
                	showTwitterConfigPanel();
                } else if (event.item.@action == 'advancedConfig') {
                	showAdvancedSettingsDialog();
                } else if (event.item.@action == 'sounds') {
					showSoundsSettingsDialog();
				} else if (event.item.@action == 'timing') {
					showTimingSettingsDialog();
				} else if (event.item.@action == 'about') {
					showAboutPage();
				}
            }
            
            private function showSettingsDialog():void {
            	var dialog:ConfigPanel = new ConfigPanel();
            	PopUpManager.addPopUp(dialog, this, true);
                PopUpManager.bringToFront(dialog);
            }
            
            private function showTwitterConfigPanel():void {
            	var dialog:TwitterConfigPanel = new TwitterConfigPanel();
            	PopUpManager.addPopUp(dialog, this, true);
                PopUpManager.bringToFront(dialog);
            }
            
            private function showStatisticsPanel():void
	        {
            	var myWindow:StatisticsWindow = new StatisticsWindow();
		      	myWindow.systemChrome = NativeWindowSystemChrome.STANDARD;
		      	myWindow.type = NativeWindowType.NORMAL;
		      	myWindow.open( true );
	        }   
	        
	        private function showAdvancedSettingsDialog():void {
            	var dialog:AdvancedConfigPanel = new AdvancedConfigPanel();
            	PopUpManager.addPopUp(dialog, this, true);
                PopUpManager.bringToFront(dialog);
            }
			
			private function showSoundsSettingsDialog():void {
				var dialog:SoundConfigPanel = new SoundConfigPanel();
				PopUpManager.addPopUp(dialog, this, true);
				PopUpManager.bringToFront(dialog);
			}
			
			private function showTimingSettingsDialog():void {
				var dialog:TimingConfigPanel = new TimingConfigPanel();
				PopUpManager.addPopUp(dialog, this, true);
				PopUpManager.bringToFront(dialog);
			}
	        
			private function showAboutPage():void {
				var dialog:AboutPanel = new AboutPanel();
				PopUpManager.addPopUp(dialog, this, true);
				PopUpManager.bringToFront(dialog);
			}
			
			/* ----------------------------------------------------
    			END OF MENU STUFF
	   	  	---------------------------------------------------- */

        ]]>
    </fx:Script>

	<fx:Declarations>
		<s:Fade id="fadein" />
		<s:Fade id="fadeout" />
	</fx:Declarations>
	
	<s:Panel styleName="timerPanel" left="0" top="0" height="164" right="0" mouseDown="{nativeWindow.startMove()}">
		<ns1:Timer id="timerCanvas" left="0" top="0" width="100%" pomodoroLengthInMinutes="25" />
		
		<s:controlBarContent>
			<s:Button label="Task List" click="toggleTaskList()" toolTip="Open/close task list"/>
			<s:Button label="Unplanned" id="unplannedButton" click="newUnplanned()" toolTip="Add unplanned" enabled="false"/>
			<s:Button label="Interruption" id="interruptionButton" click="newInterruption()" toolTip="Add interruption" enabled="false"/>
		</s:controlBarContent>
		
	</s:Panel>
	
	<s:Label text="x" click="close()" color="#FFFFFF" right="8" top="2"/>
	<s:Label text="_" click="minimize()" color="#FFFFFF" right="28" top="2"/>
	<s:Button right="56" top="0" height="22" width="54" id="toggleViewButton" label="view" click="toggleViewState()"/>
	
	<s:Group id="taskListPanel" x="0" y="166" height="100%" width="100%" visible="false" showEffect="fadein" hideEffect="fadeout">
		<ns1:TaskListCanvas x="0" y="0" height="100%" width="100%" />
	</s:Group>
	
	<mx:MenuBar id="myMenuBar" labelField="@label" itemClick="menuClick(event)">
        <fx:XMLList>
            <menuitem label="Menu">
				<menuitem label="Config">
					<menuitem label="Configuration" action="config"/>
					<menuitem label="Sounds" action="sounds"/>
					<menuitem label="Timing" action="timing"/>
					<menuitem label="Twitter" action="twitter"/>
					<menuitem label="Advanced" action="advancedConfig"/>
				</menuitem>
				<menuitem label="Statistics" action="statistics"/>
				<menuitem label="Pomodairo" action="about"/>
            </menuitem>
        </fx:XMLList>
    </mx:MenuBar>
	
</s:WindowedApplication>
